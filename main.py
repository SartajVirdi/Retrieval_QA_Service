# -*- coding: utf-8 -*-
"""Submission1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PuABNc4i8MSkoBPWhEac4A54tx5Rh_sS
"""

from flask import Flask, request, jsonify
import cohere
import fitz  # PyMuPDF
import faiss
import numpy as np
import os
import re

app = Flask(__name__)

# Load API key from environment variable
co = cohere.Client(os.getenv("COHERE_API_KEY"))

# Helper: Load and split PDF
def load_pdf(path):
    doc = fitz.open(path)
    return "\n".join(page.get_text() for page in doc)

def split_text(text, max_tokens=300):
    sentences = re.split(r'(?<=[.!?])\s+', text)
    chunks, chunk = [], ""
    for sentence in sentences:
        if len(chunk) + len(sentence) <= max_tokens:
            chunk += " " + sentence
        else:
            chunks.append(chunk.strip())
            chunk = sentence
    if chunk:
        chunks.append(chunk.strip())
    return chunks

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    if not data or "query" not in data:
        return jsonify({"error": "Query field missing"}), 400

    query = data["query"]

    # âœ… Load PDF at request time
    try:
        text = load_pdf("policy.pdf")
    except Exception as e:
        return jsonify({"error": f"Failed to load PDF: {e}"}), 500

    chunks = split_text(text)

    # Embed and index
    embed_response = co.embed(texts=chunks, model="embed-english-v3.0", input_type="search_document")
    embeddings = np.array(embed_response.embeddings).astype("float32")
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(embeddings)

    # Search
    query_embed = co.embed(texts=[query], model="embed-english-v3.0", input_type="search_query").embeddings[0]
    D, I = index.search(np.array([query_embed], dtype="float32"), k=3)
    retrieved = [chunks[i] for i in I[0]]
    context = "\n".join(retrieved)

    # Generate response
    response = co.chat(
        model='command-r-plus',
        message=query,
        documents=[{"text": context}]
    )

    return jsonify({"response": response.text.strip()})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)