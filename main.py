# -*- coding: utf-8 -*-
"""Submission1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PuABNc4i8MSkoBPWhEac4A54tx5Rh_sS
"""

from flask import Flask, request, jsonify
import cohere
import numpy as np
import faiss

app = Flask(__name__)

# ✅ Initialize Cohere client (replace with env var in prod)
co = cohere.Client("YOUR_COHERE_API_KEY")  # <-- Replace this with your actual API key

# ✅ Dummy data for testing if needed
chunks = [
    "Bajaj Allianz General Insurance Co. provides insurance for health coverage including knee surgery.",
    "Their policies typically cover 3 months and are valid across cities like Pune.",
    "For males aged 46 and above, the policy includes hospitalization and surgical benefits."
]

# ✅ Semantic Search
def search_context(query, chunks, k=3):
    embed_chunks = co.embed(texts=chunks, model="embed-english-v3.0", input_type="search_document").embeddings
    embed_chunks = np.array(embed_chunks).astype("float32")

    index = faiss.IndexFlatL2(embed_chunks.shape[1])
    index.add(embed_chunks)

    query_embed = co.embed(texts=[query], model="embed-english-v3.0", input_type="search_query").embeddings[0]
    D, I = index.search(np.array([query_embed], dtype="float32"), k)
    return [chunks[i] for i in I[0]]

# ✅ API Route
@app.route("/api/v1/hackrx/run", methods=["POST"])
def run_webhook():
    try:
        body = request.json
        query = body.get("query")
        chunks_input = body.get("chunks")

        if not query or not chunks_input:
            return jsonify({"error": "Missing 'query' or 'chunks' in request"}), 400

        top_chunks = search_context(query, chunks_input)
        context = "\n".join(top_chunks)

        prompt = f"""Based on the content below, answer the query in the format:
"Yes, <brief answer in one sentence>"

Content:
{context}

Query: {query}
Answer:"""

        response = co.generate(
            prompt=prompt,
            model="command",
            max_tokens=100
        )

        return jsonify({
            "answer": response.generations[0].text.strip()
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)